year <- 2010 : 2016
year
cat("Hi")
print("Hi")
year
i <- 2010
cat("올해는", i, "년입니다.\n")
i <- 2011
cat("올해는", i, "년입니다.\n")
for(i in year){
cat("올해는", i, "년입니다.\n")
}
for(i in year){
cat("올해는", i, "년입니다.")
}
for(i in year){
cat("올해는", i, "년입니다.\n")
}
for(i in year){
print("올해는", i, "년입니다.")
}
for(i in year){
paste("올해는", i, "년입니다.")
}
for(i in year){
print(paste("올해는", i, "년입니다."))
}
for(i in year){
cat("올해는", i, "년입니다.\n")
}
for(i in year){
message("올해는", i, "년입니다.")
}
for(i in year){
message("올해는", i, "년입니다.")
}
set.seed(1234)
check <- sample(1:100, size = 15)
check
count <- 0
length(check)
for(i in 1:length(check)){
if(check[i] %% 2 == 1){
count <- count + 1
}
}
count
sum(check %% 2 == 1)
check %% 2 == 1
for(i in 1:100){
if(i %% 7 == 0)
print(i)
}
i <- 1
while(i <= 100){
if(i %% 7 == 0){
print(i)
}
i <- i + 1
}
cat("한줄 띄기", \n "한줄 띄기")
cat("한줄 띄기", \n, "한줄 띄기")
cat("한줄 띄기", "\n", "한줄 띄기")
cat("한줄 띄기", "\t", "한줄 띄기")
?airquality
# 구현 1
for(i in 2:9){
for (y in 1:10 ){
if(y==10){
cat(i,"*",y,"=",i*y,"\n==================","\n")}
else if(y==5){
cat(i,"*",y,"=",i*y,"\n")}
else{
cat(i,"*",y,"=",i*y,"\t")
}
}
}
asdf <- for(i in 2:9){
for (y in 1:10 ){
if(y==10){
cat(i,"*",y,"=",i*y,"\n==================","\n")}
else if(y==5){
cat(i,"*",y,"=",i*y,"\n")}
else{
cat(i,"*",y,"=",i*y,"\t")
}
}
}
Sys.time()
system.time()
system.time(for(i in 2:9){
for (y in 1:10 ){
if(y==10){
cat(i,"*",y,"=",i*y,"\n==================","\n")}
else if(y==5){
cat(i,"*",y,"=",i*y,"\n")}
else{
cat(i,"*",y,"=",i*y,"\t")
}
}
})
system.time(for(i in 1:9){
for(j in 1:10){
cat(i, "*", j, "=", i*j, "\t")
if(j == 5){
cat("\n")
}
if(j == 10){
cat("\n==========================\n")
}
}
})
system.time(for(i in 1:9){
for(j in 1:10){
cat(i, "*", j, "=", i*j, "\t")
if(j == 5){
cat("\n")
}
if(j == 10){
cat("\n==========================\n")
}
}
})
system.time(for(i in 2:9){
for (y in 1:10 ){
if(y==10){
cat(i,"*",y,"=",i*y,"\n==================","\n")}
else if(y==5){
cat(i,"*",y,"=",i*y,"\n")}
else{
cat(i,"*",y,"=",i*y,"\t")
}
}
})
system.time(for(i in 2:9){
for (y in 1:10 ){
if(y==10){
cat(i,"*",y,"=",i*y,"\n==================","\n")}
else if(y==5){
cat(i,"*",y,"=",i*y,"\n")}
else{
cat(i,"*",y,"=",i*y,"\t")
}
}
})
system.time(for(i in 2:9){
for (y in 1:10 ){
if(y==10){
cat(i,"*",y,"=",i*y,"\n==================","\n")}
else if(y==5){
cat(i,"*",y,"=",i*y,"\n")}
else{
cat(i,"*",y,"=",i*y,"\t")
}
}
})
system.time(for(i in 2:9){
for (y in 1:10 ){
if(y==10){
cat(i,"*",y,"=",i*y,"\n==================","\n")}
else if(y==5){
cat(i,"*",y,"=",i*y,"\n")}
else{
cat(i,"*",y,"=",i*y,"\t")
}
}
})
system.time(for(i in 2:9){
for (y in 1:10 ){
if(y==10){
cat(i,"*",y,"=",i*y,"\n==================","\n")}
else if(y==5){
cat(i,"*",y,"=",i*y,"\n")}
else{
cat(i,"*",y,"=",i*y,"\t")
}
}
})
system.time(for(i in 1:9){
for(j in 1:10){
cat(i, "*", j, "=", i*j, "\t")
if(j == 5){
cat("\n")
}
if(j == 10){
cat("\n==========================\n")
}
}
})
system.time(for(i in 1:9){
for(j in 1:10){
cat(i, "*", j, "=", i*j, "\t")
if(j == 5){
cat("\n")
}
if(j == 10){
cat("\n==========================\n")
}
}
})
system.time(for(i in 1:9){
for(j in 1:10){
cat(i, "*", j, "=", i*j, "\t")
if(j == 5){
cat("\n")
}
if(j == 10){
cat("\n==========================\n")
}
}
})
system.time(for(i in 1:9){
for(j in 1:10){
cat(i, "*", j, "=", i*j, "\t")
if(j == 5){
cat("\n")
}
if(j == 10){
cat("\n==========================\n")
}
}
})
system.time(
for (i in var1){
for (j in var2){
cat (i, "*", j, "=", i*j, "\t")
if (j %% 5 == 0){
cat ("\n")
if (j %/% 5 == 2){
cat ("==============================================\n")
}
}
}
}
)
var1 = 2:9
var2 = 1:10
system.time(
for (i in var1){
for (j in var2){
cat (i, "*", j, "=", i*j, "\t")
if (j %% 5 == 0){
cat ("\n")
if (j %/% 5 == 2){
cat ("==============================================\n")
}
}
}
}
)
for(x in 2:9)
{
for(y in 1:10){
cat(x,"*",y,"=", x*y,"\t")
if(y==5){cat("\n")}
else if(y == 10 ){cat("\n===========================================================================\n")}
}
}
rep("=", 18)
cat(rep("=", 18))
x<-2:9
y<-1:10
for (i in x) {
for (j in y) {
cat(i,"*",j,"=",i*j,"\t")
if(j%%5==0){
cat("\n")
}
}
if(i<=i+1){
cat("==================","\n")
}
}
x<-2:9
y<-1:10
for (i in x) {
for (j in y) {
cat(i,"*",j,"=",i*j,"\t")
if(j%%5==0){
cat("\n")
}
}
cat("==================","\n")
}
apply(iris, 2, diff)
apply(iris[, 1:4], 2, diff)
lapply(iris[, 1:4], diff)
head(flights)
?flights
?nycflights13
??flights
head(airports)
library(nycflights)
library(nycflights13)
head(flights)
head(airports)
airports
head(flights)
head(airports)
library(dplyr)
head(flights)
left <- select(flights, year:dep_time, arr_time, origin)
right <- select(flights, dest)
?left_join
head(airports)
left_join(left, airports, by = c("origin" == "faa"))
left_join(left, airports, by = c("origin" = "faa"))
left_join(left, airports, by = c("origin" = "faa")) %>%
select(-(lat:dst))
right <- left_join(right, airports, by = c("origin" = "faa")) %>%
select(-(lat:dst))
right <- left_join(right, airports, by = c("dest" = "faa")) %>%
select(-(lat:dst))
new_flights <- bind_cols(left, right)
head(new_flights)
head(left)
left <- left_join(left, airports, by = c("origin" = "faa")) %>%
select(-(lat:dst))
head(left)
right <- left_join(right, airports, by = c("dest" = "faa")) %>%
select(-(lat:dst))
new_flights <- bind_cols(left, right)
head(new_flights)
setwd("~/KHURStudy/2016 Big Leader 4th/Day 2/")
iris <- read.csv("iris.csv")
getwd()
head(iris)
head(iris)
apply(iris, 2, mean)
head(iris)
iris[ , 1]
iris[ , 1:2]
iris[ , 1:4]
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, median)
class(apply(iris[, 1:4], 2, median))
sample <- sample(1:100, size =10)
sample
diff(sample)
diff_iris <- apply(iris[, 1:4], 2, diff)
diff_iris
class(diff_iris)
apply(iris[, 1:4], 2, tagl)
apply(iris[, 1:4], 2, table)
apply(iris, 2, table)
apply(iris[, 1:4], 2, mean)
1:10
x <- 1:10
x
x[1]
x[1:4]
iris[, 1:4]
iris3
lapply(iris[, 1:4], mean)
apply(iris[, 1:4], 2, mean)
lapply(iris[, 1:4], diff)
unlist(lapply(iris[, 1:4], diff))
lapply(iris[, 1:4], diff)
sapply(iris[, 1:4], mean)
sapply(iris[, 1:4], mean, simplify = FALSE)
greaterThanThree <- function(x){
x > 3
}
greaterThanThree(4)
greaterThanThree(2.09999999999999999)
sapply(iris[, 1:4], greaterThanThree)
sapply(iris[, 1:4], greaterThanThree, simplify = FALSE)
install.packages("dplyr")
library(dplyr)
??dplyr
install.packages("nycflights13")
library(nycflights13)
library(nycflights13)
data(flights)
flights
head(flights)
filter(flights, month == 7)
# 7월 출발,  출발시간 : 1630
View(flights)
filter(flights, month == 7, dep_time > 1630)
flights[flights$month == 7 & flights$dep]
flights[flights$month == 7 & flights$dep_time > 1630, ]
filter()
?filter
dimnames(flights)
dimnames(flights)[[2]]
flights
View(flights)
select(flights, month, day, dep_time, arr_time)
flights[, c("month", "day", "dep_time", "arr_time")]
select(flights, month:dep_delay)
select(flights, contains("time"))
select(flights, contains("time"), contains("delay"))
select(flights, -year)
select(flights, -(year:day))
select(flights, -contains("time"))
select(flights, year, day, month, everything())
arrange(flights, distance)
arrange(flights, distance, dep_time)
arrange(flights, desc(distance))
flightsSpeed <- mutate(flights, speed = distance / air_time * 60)
select(flightsSpeed, distance, air_time, speed)
select(flightsSpeed, distance, air_time, speed)
transmute(flights, speed = distance / air_time * 60)
Population <- data.frame(No = 1:6, Region = rep(c("Europe", "Asia", "N.America"),
each = 2), Nationality = c("England", "Germany", "Korea", "Japan", "Canada",
"USA"), Population = c(53.8, 80.7, 50, 126.3, 36.2, 324))
Population
Population
grouped <- group_by(Population, Region)
grouped
grouped <- group_by(Population, Region)
grouped
grouped
summarise(grouped, Average = mean(Population))
ASDF <- data.frame(No = 1:6, Region = rep(c("Europe", "Asia", "N.America"),
each = 2), Nationality = c("England", "Germany", "Korea", "Japan", "Canada",
"USA"), Population = c(53.8, 80.7, 50, 126.3, 36.2, 324))
ASDF
ASDFASDF <- group_by(ASDF, Region)
ASDFASDF
summarise(ASDFASDF, Average = mean(Population))
Nation <- data.frame(No = 1:4, Region = rep("Europe", 4), Nationality = c("England",
"Germany", "France", "Italy"))
Nation
Capital <- data.frame(Nationality = c("Denmark", "England", "France", "Germany",
"Hungary", "Italy"), Capital = c("Copenhagen", "London", "Paris", "Berlin",
"Budapest", "Rome"))
Capital
Nation
Capital
left_join(Nation, Captial)
left_join(Nation, Capital)
Nation
Capital
Capital <- data.frame(Nation = c("Denmark", "England", "France", "Germany",
"Hungary", "Italy"), Capital = c("Copenhagen", "London", "Paris", "Berlin",
"Budapest", "Rome"))
Capital
Nation
left_join(Nation, Capital)
left_join(Nation, Capital, by = c("Nationality" = "Nation"))
a1 <- filter(flights, month == 7 | month == 8)
a2 <- select(a1, month:day, contains("delay"), origin, dest, distance, air_time)
a3 <- mutate(a2, speed = distance/air_time * 60)
a4 <- group_by(a3, dest)
a5 <- summarise(a4, arr_delay_mean = mean(arr_delay, na.rm = TRUE))
a6 <- arrange(a5, desc(arr_delay_mean))
install.packages("reshape2")
library(reshape2)
melt()
library(reshape2)
# melt(data, id.vars, measure.vars, variable.name, value.name, na.rm,
# factorsAsStrings = TRUE)
# Wide Layout
students_wide <- data.frame(student = c("A", "B"), korean = c(80, 68), math = c(72,
94), english = c(77, 82))
# Long Layout
students_long <- data.frame(student = rep(c("A", "B")), subject = rep(c("korean",
"math", "english"), each = 2), score = c(80, 68, 72, 94, 77, 82)))
# Wide Layout
students_wide <- data.frame(student = c("A", "B"), korean = c(80, 68), math = c(72,
94), english = c(77, 82))
# Long Layout
students_long <- data.frame(student = rep(c("A", "B")), subject = rep(c("korean",
"math", "english"), each = 2), score = c(80, 68, 72, 94, 77, 82))
# melt(data, id.vars, measure.vars, variable.name, value.name, na.rm,
# factorsAsStrings = TRUE)
wide_st
students_wide
melt(students_wide, id.vars = "student", measure.vars = c("korean", "math", "english"))
melt(students_wide, id.vars = "student",
measure.vars = c("korean", "math", "english"),
variable.name = "subject", value.name = "score")
melt(students_wide, id.vars = "student",
variable.name = "subject", value.name = "score")
melt(students_wide, id.vars = "student",
measure.vars = -"korean"),
variable.name = "subject", value.name = "score")
melt(students_wide, id.vars = "student",
measure.vars = -"korean",
variable.name = "subject", value.name = "score")
dcast(students_long, student ~ subject)
data(airquality)
# summary, str, head
summary(airquality)
str(airquality)
head(airquality)
molten_airq <- melt(airquality,
id.vars = c("month", "day"))
molten_airq <- melt(airquality,
id.vars = c("Month", "Day"))
head(molten_airq)
molten_airq <- melt(airquality,
id.vars = c("Month", "Day"),
na.rm = TRUE)
head(molten_airq)
head(molten_airq)
wide_airq <- dcast(molten_airq,
month + day ~ variable)
wide_airq <- dcast(molten_airq,
Month + Day ~ variable)
head(wide_airq)
library(ggplot2)
ggplot(data = filter(molten_airq, Month == 5),
aes(x = Day, y = value, color = variable)) +
geom_line()
data("diamonds")
data()
data(diamonds)
str(diamonds)
?diamonds
